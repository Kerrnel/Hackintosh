#!/bin/sh

#	History
#	GLK	001	230312	Better AML checking with enabled output

Msg()	{ echo "$(date +%s)	$@" >&2; }
Err()	{ echo "++++++++	$@" >&2; }

Usage()
 {
	Msg "	$0 [config.plist ...]

	Check existance in kext folder relative to input file of kext(s) and output version(s).
"
 }

CheckKext()
 {
	local	line p last k tag

	p="$1"
	p="${p%/*}"
	[ "$p" = "$1" ] && p='' || p="${p}/"
	p="${p}Kexts"

	Msg '-----------------------------------------'
	Msg '-		KEXT			-'

	while read line; do if [ -n "$line" ]; then
#		Msg "Checking: $p/$line in $i"

#	%DeviceProperties%Kernel%Add/#%BundlePath/string=Lilu.kext
# ...
#	./#%BundlePath/string=IntelMausi.kext
#	./#%Comment/string=
#	./#%Enabled=~true
#	./#%ExecutablePath/string=Contents/MacOS/IntelMausi

		tag="${line##*%}"
		line="${tag#*=}"
		tag="${tag%%[/=]*}"

		case "$tag" in
		  'BundlePath')
			[ -n "$last" ] && Msg "$last" && last=''
			k="$p/$line"
			if [ -d "$k" ]; then
				last=$(kext-version "$p/$line")
			else
				k=''
				Err "Not found: $line"
			fi
		  ;;
		 'Enabled')
			[ "$line" = '~false' ] && last="- 	$last" || last="++	$last"
		  ;;
		  'ExecutablePath')
			if [ -n "$k" ]; then
				[ -e "$k/$line" ] && last="${last} [$line]" || last="${last} [*** $line NOT FOUND ***]"
			fi
		  ;;
		esac
	fi; done
	[ -n "$last" ] && Msg "$last" && last=''
 }

ListMedium()
 {
	# drwxr-xr-x  58 akua akua 1856 Feb  5 11:47 3rd
	local p n u g s m d t name
	while read p n u g s m d t name; do
		if [ -z "$name" ]; then
			echo '* NOT FOUND *'
		else
			echo "${name##*/} ($s, $m $d $t)"
		fi
	done
 }

AmlCheck()
 {
	local	e o t n
	o=$(ls -l "$3" 2>/dev/null | ListMedium)
	n=$((40 - ${#o}))
	while [ $n -gt 0 ]; do
		t="$t	"
		n=$(($n - 8))
	done
	[ "$2" = "${2%false}" ] && e='++' || e='- '
	Msg "$e	$o	$t$1"
 }

CheckAml()
 {
	# %ACPI%Add/#1%Comment/string=Disables CNVW Device waking up PC
	# %ACPI%Add/#1%Enabled=~false
	# %ACPI%Add/#1%Path/string=SSDT-Disable-CNVW.aml

	local	line p idx last aC aE aP t

	p="$1"
	p="${p%/*}"
	[ "$p" = "$1" ] && p='' || p="${p}/"
	p="${p}ACPI"

	Msg '-----------------------------------------'
	Msg "-		ACPI in $p		-"

	last=1
	while read line; do
		idx="${line#*#}";	idx="${idx%%%*}"				# Array index
		t="${line%%=*}";	t="${t##*%}"; t="${t%%/*}"		# Tag
		v="${line#*=}"										# Value

		[ "$idx" != "$last" ] && last=$idx && AmlCheck "$aC" "$aE" "$p/$aP"

		case "$t" in
		  'Comment')	aC="$v"	;;
		  'Enabled')	aE="$v"	;;
		  'Path')		aP="$v"	;;
		  *)			Msg "Syntax error in: $line"	;;
		esac
#		Msg $(ls -l "$p/$line")
	done

	AmlCheck "$aC" "$aE" "$p/$aP"
 }

KextCheck() {	xmlp -a -s kext -n 4 "$1" | CheckKext "$1"; }
AcpiCheck() {	xmlp -e -m '%ACPI%Add' "$1" | CheckAml "$1"; }

for i in "$@"; do
	if [ -r "$i" ]; then
		KextCheck "$i"
		AcpiCheck "$i"
		Msg '-----------------------------------------'
	else
		Msg "Can't read $i"
	fi
done

[ -z "$1" ] && Usage
