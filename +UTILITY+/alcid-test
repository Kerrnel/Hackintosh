#!/bin/sh

#	History
#	001 GLK	220519	Summary in all-devices.txt

# Configuration
WORKDIR='/opt/alcid'
ESPNAME='ESP_B1T'
ALLOWED=''			# Allowed alcid values
DELAY=44

LOG="${WORKDIR}/log.txt"

# Put parameters in work dir?
[ -e "$WORKDIR/setup.sh" ] && . "$WORKDIR/setup.sh"

LAUNCHD='/Library/LaunchDaemons/com.akua.alcid-test.plist'

MYPATH="$0"
[ "$MYPATH" = "${MYPATH#/}" ] && MYPATH="$(pwd)/$MYPATH"

# Need for logging
mkdir -p "$WORKDIR"

AllowedALCID()
 {
	# Return allowed alcids for a given PCI identiver (0xVID:0xPID)

	# Override by parameter in setup.sh?
	[ -n "$ALLOWED" ] && echo "$ALLOWED" && return 0

#	case $(AudioPCI) in
#	  '0x8086:0x9d71')	echo 1 2 3 4 5 7 12 15 16 17 18 22 23 28 31 90 92 97 98 99 20 100 32	;;
#	  *)
		Log "Card is not set up in AllowedALCID function - please add it from https://github.com/acidanthera/AppleALC/wiki/Supported-codecs"
		Log "Using sensible defaults but this will be inefficient (5 second pause)"
		echo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 27 28 29 30 32 33 34 35 40 44 45 47 55 58 66 69 76 77 86 88 91 93 96 99 100 127 128 188
#		sleep 5
#	  ;;
#	esac
 }

Error()
 {
	# Show error, quit
	Log '***'
	Log "*** $@"
	Log '***'
	exit 1
 }

Log()
 {
	# Show & log a message
	echo "$@" | while read line; do
		echo "$(date +%y%m%d.%H:%M:%S)  $line" | tee -a "$LOG" >&2
	done
 }

SetESP()
 {
	# Set EFI System Partition volume name
	ESPNAME="$1"
	CFGFILE="/Volumes/${ESPNAME}/EFI/OC/config.plist"
 }

AudioPCI()
 {
	system_profiler SPPCIDataType | (
	
	while read line; do
		fld="${line%%:*}"
		val="${line##*: }"
#		echo "Read ($dType): $fld/$val" >&2
		case "$fld" in
		  'Type')		dType="$val"	;;
		  'Vendor ID')	[ "$dType" = 'Audio device' ] && dVid="$val"	;;
		  'Device ID')	[ "$dType" = 'Audio device' ] && dDid="$val"	;;
		esac
	done

	[ -n "$dVid" ] && echo "$dVid:$dDid"
	)
 }

GetALCID()
 {
	# Return alcid=X value from CFGFILE
	local	cnt i
	cnt=0
	for i in $(grep 'alcid=' "$CFGFILE" | sed -e 's/.*alcid=//' -e 's/[^0-9].*//'); do
		cnt=$((1 + $cnt))
	done
	[ $cnt -ne 1 ] && grep 'alcid=' "$CFGFILE" >&2 && Error 'The configuration file must have exactly one alcid=X for this to work'
	OUT=$i
 }

SetALCID()
 {
	# Set alcid=X in CFGFILE, preserving current in '.save' file
	local	cfgtmp="${CFGFILE%.*}.save"

	Log "Inserting alcid=$nextid in $CFGFILE"

	cp -f "$CFGFILE" "$cfgtmp"
	cat "$cfgtmp" | sed "s/alcid=${alcid}/alcid=${1}/" > "${CFGFILE}"
 }

GetAudioDevices()
 {
	# Get current audio devices
	system_profiler 'SPAudioDataType' | (

	cnt=0

	while read line; do if [ -n "$line" ]; then
		if [ "$line" != "${line%:}" ]; then	# New item
			case "${line%:}" in
			  'Audio'|'Devices')	;;
			  *)
				cnt=$((1 + $cnt))
				echo "Au${cnt}_Name=\"${line%:}\""
			  ;;
			esac
		else
			fld="${line%%:*}"
			val="${line##*: }"
			line="Au$cnt"
			for f in $fld; do
				line="${line}_$f"
			done
			echo "${line}=\"$val\""
		fi
	fi; done
	echo "AuCnt=$cnt"
	)
 }

ShowDevices()
 {
	# Output current audio devices
	local	n name oc ic

	eval $(GetAudioDevices)

	echo "Current ID:	$alcid"
	echo "Audio Card:	$pciid"
	echo "Currently:	$AuCnt Devices"

	n=0
	while [ $n -lt $AuCnt ]; do
		n=$((1 + $n))
		name=$(eval echo \$Au${n}_Name)
		oc=$(eval echo \$Au${n}_Output_Channels)
		ic=$(eval echo \$Au${n}_Input_Channels)
		[ -z "$ic" ] && ic='_'
		[ -z "$oc" ] && oc='_'
		echo "$ic/$oc: $name"
	done
 }

EfiPartitions()
 {
	# List name:dev of current EFI partitions (space in name probably bad)
	diskutil quiet list physical | (

	while read num kind name line; do
		#    1:                        EFI ⁨ESP_B1T⁩                 209.7 MB   disk0s1
		#	Note - name field has wide invisible characters attached
		case "$num" in
		  [0-9]*)
			if [ "$kind" = 'EFI' ]; then
				dev="${line##* }"
				name=$(echo "$name" | tr -cd "[:print:]")
				echo "$name:$dev"
			fi
		  ;;
		esac
	done

	)
 }

VerifyConfig()
 {
	# Make sure we can find config.plist for OpenCore - mount EFI partition(s) if needed
	local	e d

	SetESP "$ESPNAME"

	# Find opencore config file / mount volume as needed
	[ -r "$CFGFILE" ] || diskutil mount "$ESPNAME"
	[ -r "$CFGFILE" ] || sudo diskutil mount "$ESPNAME"

	if [ ! -r "$CFGFILE" -a ! -d "/Volumes/$ESPNAME" ]; then
		Log "$ESPNAME not mounted; searching EFI volumes..."
		for e in $(EfiPartitions); do
			d="${e#*:}"
			e="${e%:*}"
			SetESP "$e"
			[ ! -r "$CFGFILE" ] && sudo diskutil mount "$d"
			[ ! -r "$CFGFILE" ] && Log "Checked for $CFGFILE"
		done
	fi

	[ -r "$CFGFILE" ] || Error "Can not read from $CFGFILE, aborting."
 }

LaunchDaemon()
 {
	# Output LaunchDaemon plist to start us after boot
	echo '<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
	<dict>
		<key>RunAtLoad</key>			<true/>
		<key>KeepAlive</key>			<true/>
		<key>Label</key>				<string>com.akua.services</string>
		<key>ProgramArguments</key>
		<array>
			<string>sh</string>
			<string>-c</string>
			<string>'$MYPATH'</string>
		</array>
		<key>WorkingDirectory</key>		<string>/tmp</string>
		<key>StandardErrorPath</key>	<string>/tmp/alcid.err</string>
		<key>StandardOutPath</key>		<string>/tmp/alcid.out</string>
	</dict>
</plist>'
 }

Init() 
 {
	# Install LaunchDaemon, load it
	LaunchDaemon | sudo tee "$LAUNCHD" > /dev/null
	sudo launchctl load "$LAUNCHD"
	echo "LaunchDaemon activated in $LAUNCHD"
 }

Quit()
 {
	# Remove stopper (where we started) and LaunchDaemon and exit
	rm "${WORKDIR}/stopper"
	if [ -e "$LAUNCHD" ]; then
		sudo launchctl unload "$LAUNCHD"
		sudo rm "$LAUNCHD"
	fi
	grep '/.:' "${LOG}" | sed -e 's/[^ ]* //' | sort -u > "${WORKDIR}/all-devices.txt"
	Error "Finished at alcid $stopper"
 }

VerifyConfig

GetALCID
alcid="$OUT"

pciid=$(AudioPCI)
info=$(ShowDevices)
allowed=$(AllowedALCID)

# Just show current config?
[ "$1" = '-t' ] && echo "$info" && exit 0

Log "$info"

echo "$info" > "${WORKDIR}/info.${alcid}.txt"
echo '-----' >> "${WORKDIR}/info.${alcid}.txt"
system_profiler SPDisplaysDataType >> "${WORKDIR}/info.${alcid}.txt"

echo "$alcid" > "${WORKDIR}/current"

nextid=0
found=0
for i in $allowed; do
	if [ $nextid -eq 0 ]; then
		[ $found -eq 1 ] && nextid=$i
		[ $i -eq $alcid ] && found=1
	fi
done

if [ $nextid -eq 0 ]; then
	for i in $allowed; do
		[ $nextid -eq 0 ] && nextid=$i
	done
fi

SetALCID $nextid

Log "Allowed ALCIDs: $allowed"
Log "Next ALCID to test: $nextid"

if [ -e "${WORKDIR}/stopper" ]; then
	stopper=$(head -n 1 "${WORKDIR}/stopper")
	found=0
	for i in $allowed; do [ $i -eq $stopper ] && found=1; done
	if [ $found -eq 0 ]; then
		Log "Terminating alcid ($stopper) is not in list of allowed ($allowed)"
		Log "Setting stopper to current alcid: $alcid"
		echo "$alcid" > "${WORKDIR}/stopper"
	fi
	[ $nextid -eq $stopper ] && Quit
	Log "Rebooting in $DELAY to try alcid $nextid"
	Init
	grep '/.:' "${LOG}" | sed -e 's/[^ ]* //' | sort -u > "${WORKDIR}/all-devices.txt"
	sleep $DELAY
else
	echo "$alcid" > "${WORKDIR}/stopper"
	Log "Will reboot until we return to alcid $alcid"
	Init
	sleep 5
fi

sudo shutdown -r now
