#!/bin/bash
gVersion=0.07
gStamped=201213
#
#	xmlparse (c) 2020 Akua Corp
#
#	License: Public Domain
#
#	History
#	007	GLK	201213	Support -e for current behaviour, compress paths with . matching parent component
#	006	GLK	201124	Support array indexing on by default, -a to toggle
#	005	GLK	201121	Support multiple inputs and file or URL as argument
#	004	GLK	201120	Show Usage if no stdin and no args
#	003	GLK	200823	Add -f flag to return after first match; add -k flag to flatten key/value couplets into /key/name/type:value lines
#	002	GLK	200817	Add -n flag to get URL for JPG in RSS feeds from Reddit
#	001	GLK	200711	Fix <br/> issue - I think fixed on another machine already


# Globals setable by options
DEBUG=0			# Noisy?
RAWCONTENT=0	# Process html content tags as XML ... scale 0 to 2
IGNORELAYOUT=1	# Ignore table/div/span constructs in html
IGNOREBLANK=1	# Don't dump empty items
IGNOREXML=0		# Handle HTML?
ONLYFIRST=0		# Return after finding first match
FLATKEY=1		# Turn dict <key>A</key><string>s</string> into path/A/string/s
ARRAYIDX=1		# Turn /array/ into /#idx/ where idx increments each array item
MATCH=''		# Only print matching path
SUFFIX=''		# Only print if value has this suffix
NEXTS=0			# Number of MATCH lines to print after SUFFIX is hit (e.g. to include following html line after jpg matches)
NEXTC=0			# This is set to NEXTS when SUFFIX matches
ONLYVALUE=0		# No tag path: prefix
EXPAND=0		# Expanded full paths per line vs . per matching component
OUTXML=0		# Output XML again (after edits presumably)

# Global current tag in process
ENTITY=''	# TAG[ prop1=2][ prop3=4][/]
CONTENT=''	# Text between TAG ...> and <
TAG=''		# TAG of entity e.g. <TAG prop=1 prop2=3>
PROP=''		# properties of TAG
SINGLET=0	# Is the tag a singlet (ends with /> like img, link)
LASTTAG=''	# Last tag output (to compress path)
DEPTH=0		# How deep into the hierarchy are we?

Msg()
 {
	local t
	[ "$1" = '-' ] && shift || ([ -n "$EPOCHSECONDS" ] && t="$EPOCHSECONDS" || t=$(date +%s); t="$((1000 + ($t % 3600))): ")
	echo "$t$@" >&2
 }

InfoMsg()
 {
	[ $DEBUG -gt 0 ] && Msg "$@"
 }

DbgMsg()
 {
	[ $DEBUG -gt 1 ] && Msg "$@"
 }


ReadXmlTag()
 {
	# Split words at >, split lines at < (example BODY a=b c="Some text">Test<NextTag> -> ENTITY = BODY ... text", CONTENT = Test, pos at NextTag>; TAG=BODY)
	local IFS=\>
	read -d \< ENTITY CONTENT
	err=$?

	CONTENT="${CONTENT#"${CONTENT%%[![:space:]]*}"}"	# Remove leading whitespace characters	
	CONTENT="${CONTENT%"${CONTENT##*[![:space:]]}"}"	# Remove trailing whitespace characters
	ENTITY="${ENTITY%"${ENTITY##*[![:space:]]}"}"		# Remove trailing whitespace characters

	SINGLET=1
	TAG="${ENTITY%/}"				# Single tag element?
	[ "$TAG" = "$ENTITY" ] && SINGLET=0 || TAG="${TAG%"${TAG##*[![:space:]]}"}"		# Remove trailing whitespace characters
	PROP="${TAG#*[[:space:]]}"		# Break out tag and properties
	PROP="${PROP%[[:space:]]}"		# Dangling space in singlet
	TAG="${TAG%%[[:space:]]*}"		# Space separator after TAG?
	[ "$PROP" = "$TAG" ] && PROP=''
	[ $BASH_VERSINFO -gt 3 ] && TAG="${TAG,,*}" || TAG=$(echo "$TAG" | tr '[:upper:]' '[:lower:]')				# ... lower case all tags for match - fails on Darwin's bash 3.x
	return $err
 }


PrintLine()
 {
	# Print one line of output - check MATCH, ONLYVALUE, IGNOREBLANK parameters
	local	m tag

	tag="$1"
	val="$2"

	if [ -n "$MATCH" ]; then
		m="${tag#$MATCH}"
		[ "$m" = "$tag" ] && return 0
	fi

	if [ -n "$SUFFIX" ]; then
		m="${val%$SUFFIX}"
		if [ "$m" = "$val" ]; then		# Suffix mismatch
			[ $NEXTC -le 0 ] && return 0
			NEXTC=$(($NEXTC - 1))
		else
			NEXTC="$NEXTS"				# Suffix match, this many matching tags after this one will be included
		fi
	fi

	if [ -n "$val" -o $IGNOREBLANK -eq 0 ]; then
		[ $ONLYVALUE -eq 0 ] && PrintField "$tag" "$val" || echo "$val"
	fi

	[ $ONLYFIRST -eq 1 -a -n "$MATCH$SUFFIX" ] && exit 0 || ONLYFIRST=$(($ONLYFIRST - 1))
	return 0
 }


PrintTag()
 {
	# Print $1 tag's properties if any in $@
	local	i p v path

	path="$1"
	shift
	[ $OUTXML -ne 0 ] && path="${path##*/}"
	for i in "$@"; do
		DbgMsg "PROP: ($i) ($path) ($PROP)"
		if [ $OUTXML -eq 0 ]; then
			p="${i%%=*}"	# Split property from value
			v="${i#*=}"
			v="${v#\"}"		# Chop off quoting
			v="${v%\"}"
			v="${v#\'}"
			v="${v%\'}"
			PrintLine "$path.$p" "$v"
		else
			path="${path} $i"
		fi
	done
	[ $OUTXML -ne 0 ] && PrintLine "$path" 
 }


CompressTag()
 {
	local	a n p q s r
	local	t="$1"

	OUT="$t"

	a="$LASTTAG";	LASTTAG="$t"
	n=''

	s="${t#/}"
	[ "$t" != "$s" ] && t="$s" && s='/'

	r="${a#/}"
	[ "$a" != "$r" ] && a="$r" && r='/'

	[ "$r" != "$s" ] && return 0

	while [ -n "$a" -a -n "$t" ]; do
		p="${a%%/*}";	a="${a#*/}"
		[ "$p" = "$a" ] && a=''
		q="${t%%/*}";	t="${t#*/}"
		[ "$q" = "$t" ] && t=''

		if [ "$q" = "$p" ]; then
			n="${n}."
		else
			n="$n/$q"
			[ -n "$t" ] && n="$n/$t" && t=''
		fi
	done

	OUT="$n$t"
 }


PrintField()
 {
	# Output "${1}White space separated items from $2"
	local	f p l tag
	tag="$1"
	f="$2"
	l=''
	f="${f%"${f##*[![:space:]]}"}"		# Remove trailing whitespace characters
	while [ -n "$f" ]; do
		f="${f#"${f%%[![:space:]]*}"}"	# Remove leading whitespace characters  
		p="${f%%[[:space:]]*}"			# Get first "field"
		l="$l $p"
		[ "$p" = "$f" ] && f='' || f="${f#*[[:space:]]}"
	done

	# Compress some tag path items - e.g. dict/key to %
	if [ $EXPAND -eq 0 -a $OUTXML -eq 0 ]; then
		CompressTag "$tag"
		tag="$OUT"
	fi
	if [ $OUTXML -eq 0 ]; then
		echo "${tag}:${l# }"
	else
		for ((l=$DEPTH; l>0; l--)); do printf "\t"; done
		echo "<$tag>${l# }</$tag>"
	fi
 }


FlattenXml()
 {
	local	depth path parms last endt kc kp idx

	kc=''
	last=''									# Last tag encountered (to see if we close it with next tag)
	depth=$1								# Depth inside hierarchy of tags
	path="$2"								# Path to current processing
	endt="$3"								# Close tag if not last path item
	idx=$4									# 0 or Array Index number
	[ -z "$endt" ] && endt="${path##*/}"	# End when we hit this close tag

	DEPTH=$depth							# For XML output indendation

	while ReadXmlTag; do
		if [ $SINGLET -ne 0 ]; then
			InfoMsg "TAG ($depth): $TAG ($ENTITY:$CONTENT:$SINGLET)"
			PrintTag "$path/$TAG" $PROP
			PrintLine "$path" "$TAG"
		elif [ $FLATKEY -ne 0 -a "$TAG" = 'key' ]; then
			[ -n "$kp" ] && path="$kp"	# Backup to our key level
			kc="$CONTENT"				# Value of <key>
			if [ -n "$kc" ]; then
				kp="$path"
				# Replace /dict/key/ with /%/ for shortcut
				[ "${path##*/}" = 'dict' ] && path="${path%/*}/%/$kc" || path="$path/key/$kc"
			fi
			ReadXmlTag || return 0		# Eat closing /key
		elif [ $ARRAYIDX -ne 0 -a "$TAG" = 'array' ]; then
			DoArray $depth "$path" "$CONTENT" "$PROP"
		elif [ -n "$TAG" ]; then case "$TAG" in
		  !--)
			InfoMsg "CMT: $PROP"
			parms="${PROP%--}"
			[ "$parms" != "$PROP" ] && PrintLine "$path/comment" "$parms"
		  ;;

		  "/$endt")				# End of parent reached
			InfoMsg "BACK ($depth): $path : $endt ($ENTITY:$CONTENT)"
			return 0
		  ;;

		  content)
			PrintTag "$path/$TAG" $PROP
			DoContentTag $depth "$path/$TAG" "$CONTENT"
			ReadXmlTag || return 0		# kill /content
		  ;;

		  tr|td|table|div|span|br|p|/tr|/td|/table|/div|/span|/p)
			[ $IGNORELAYOUT -eq 0 ] && DoTag $depth "$path/$TAG" "$CONTENT" "$PROP"
		  ;;

		  *)
			if [ $idx -gt 0 ]; then
				DoTag $depth "$path${idx}/$TAG" "$CONTENT" "$PROP"
				idx=$((1 + $idx))
			else
				DoTag $depth "$path/$TAG" "$CONTENT" "$PROP"
			fi
		  ;;
		esac; fi
    done
 }


DoTag()
 {
	# Handle default tag (- not close tags)
	local	dep="$1"
	local	tag="$2"
	local	con="$3"
	local	prp="$4"
	local	ent="$5"

	PrintTag "$tag" $prp
	PrintLine "$tag" "$con"

	InfoMsg "DEEP ($dep) on $tag ($ENTITY:$CONTENT)"
	FlattenXml $(($dep + 1)) "$tag" "$ent" 0
 }


DoArray()
 {
	# Handle array
	local	dep="$1"
	local	tag="$2"
	local	con="$3"
	local	prp="$4"
	local	ent="$5"

	PrintTag "$tag" $prp
	PrintLine "$tag" "$con"

	InfoMsg "DEEP ($dep) on $tag ($ENTITY:$CONTENT)"
	FlattenXml $(($dep + 1)) "$tag/#" 'array' 1
 }


DoContentTag()
 {
	local	html

	# Basic HTML encoded special character conversion ... and send it on down the processor
	[ $RAWCONTENT -lt 2 ] && html=$(echo "$3" | sed -e 's/&lt;/</g' -e 's/&gt;/>/g' -e 's/&quot;/"/g' -e 's/&amp;/\&/g' -e 's/&#32;/ /g')

	case $RAWCONTENT in
	  0)	echo "$html" | FlattenXml "$1" "$2" '' 0	;;
	  1)	PrintLine "$2" "$html"						;;
	  *)	PrintLine "$2" "$3"						;;
	esac
 }


DoXML()
 {
	# Scan to start of an XML section (mostly the first line)
	while [ "$TAG" != '?xml' ]; do
		ReadXmlTag || exit 0	# XML header
	done
	PrintTag "${TAG#?}" ${PROP%?} # "${ENTITY#*[[:space:]]}"

	# Next tag is singlet by XML definition; RSS Feeds don't have !doctype - they have feed
	ReadXmlTag || exit 0
	PrintLine "${TAG#!}" "${ENTITY#*[[:space:]]}"

	FlattenXml 0 ''	'' 0 # Start at the top tag
 }


GetURL()
 {
	local	w f e

	if [ "${1%%://*}" != "$1" ]; then
		w=$(which 'wget' 2>/dev/null)
		f='-O - -U "Mozilla/4.0"'
		[ -z "$w" ] && w=$(which 'curl' 2>/dev/null) && f='-sA "Mozilla/4.0"'
		if [ -z "$w" ]; then
			echo "Need curl or wget to get URLs"
			exit 1
		fi
		InfoMsg "Loading: $1 with $w $f"
		$w $f "$1" 2>/dev/null
		e=$?
		DbgMsg "Loaded ($e): $1"
	else
		cat "$1"
	fi
 }


Usage()
 {
	local	b=$(basename "$0")

	Msg '-' "Usage: $b [-b][-c][-d][-f][-h][-k][-m path][-n #][-q][-s suffix][-t][-?] [URL or File or use stdin if nothing]

	-b	Ignore blank lines toggle (default ON)
	-c	Increase rawness content fields (parsed as XML -> HTML -> raw)
	-d	Increase verbosity
	-e	Expand full paths (vs compressed . for each matching component to parent
	-f	Stop parsing after nth match (see -m) per stream. Can specify multiple for multiple matches.
	-h	Ignore search for ?xml tag to start (e.g. parse HTML)
	-k	Toggle flatten key tag into path - key/val couplets as path/key/name/type:value
	-m	Match - only output if /path matches given path (at head)
	-n	Next n fields after match included (-s applies)
	-q	Do not prefix each line with /path: - just value
	-s	Suffix match - match backside (e.g. .jpg)
	-t	Ignore content layout tags like tables, divs, spans
	-x	Output XML ... work in progress

	or - cat file.xml | $b ...

	Examples
	Version of kext: plutil -convert xml1 -o - AppleALC.kext/Contents/Info.plist | xmlparse -m /plist/%/CFBundleShortVersionString -q -f
	Reddit RSS images with URLs: xmlparse -n 1 -m '/entry/content/a.href' -s '.jpg' -q 'https://reddit.com/r/cityporn/rising/.rss'

	Version $gVersion from $gStamped
"
 }


URL=''

while [ -n "$1" ]; do
	case "$1" in
	  '-a')	ARRAYIDX=$((1 - $ARRAYIDX))			;;	# Toggle flatten keys in dicts
	  '-b') IGNOREBLANK=$((1 - $IGNOREBLANK))	;;
	  '-c') RAWCONTENT=$((1 + $RAWCONTENT))		;;	# Rawness of HTML ouput (parsed, HTML, raw)
	  '-d')	DEBUG=$((1 + $DEBUG))				;;
	  '-e')	EXPAND=$((1 + $EXPAND))				;;	# Expand output from compressed -> paths -> XML (XML not yet done)
	  '-f')	ONLYFIRST=$((1 + $ONLYFIRST))		;;	# Return after finding first MATCH (-m)
	  '-h')	IGNOREXML=$((1 - $IGNOREXML))		;;	# Allow HTML?
	  '-k')	FLATKEY=$((1 - $FLATKEY))			;;	# Toggle flatten keys in dicts
	  '-m')	MATCH="$2"; shift					;;
	  '-n')	NEXTS="$2"; shift					;;	# Include n lines after SUFFIX is hit
	  '-q') ONLYVALUE=$((1 - $ONLYVALUE))		;;	# No path prefix
	  '-s')	SUFFIX="$2"; shift					;;	# Only print lines whose value ends with SUFFIX (e.g. .jpg)
	  '-t') IGNORELAYOUT=$((1 - $IGNORELAYOUT))	;;	# Ignore content layout
	  '-x')	OUTXML=$((1 + $OUTXML))				;;	# Output XML again
	  '-?')	Usage; exit 0						;;
	  -*)	Msg "Unknown option: $1"			;;
	  *)	URL="$URL
$1"
	esac
	shift
done

if [ -n "$URL" ]; then
	echo "$URL" | while read line; do if [ -n "$line" ]; then
		GetURL "$line" | DoXML
	fi; done
elif [ -t 0 ]; then
	Usage
else
	[ $IGNOREXML -eq 0 ] && DoXML || FlattenXml 0 '' '' 0
fi
